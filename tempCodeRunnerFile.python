# pong game using pygame

import pygame
import random
import sys

# creates ball object
class Ball:
    def __init__(self, screen, background_color):
        self.screen = screen
        self.background_color = background_color
        self.x_pos = 400
        self.y_pos = 300
        self.x_speed = random.randint(-5, 5)
        self.y_speed = random.randint(-5, 5)
        self.radius = 10
        self.color = (255, 255, 255)
    def draw(self):
        pygame.draw.circle(self.screen, self.color, (self.x_pos, self.y_pos), self.radius)
    def move(self):
        self.x_pos += self.x_speed
        self.y_pos += self.y_speed
    def bounce(self):
        self.x_speed *= -1
        self.y_speed *= -1
    def reset(self):
        self.x_pos = 400
        self.y_pos = 300
        self.x_speed = random.randint(-5, 5)
        self.y_speed = random.randint(-5, 5)
    def collision(self, paddle):
        if self.x_pos - self.radius <= paddle.x_pos + paddle.width and self.x_pos + self.radius >= paddle.x_pos and self.y_pos - self.radius <= paddle.y_pos + paddle.height and self.y_pos + self.radius >= paddle.y_pos:
            return True
        else:
            return False
    def draw(self):
        pygame.draw.circle(self.screen, self.color, (self.x_pos, self.y_pos), self.radius)
    def move(self):
        self.x_pos += self.x_speed
        self.y_pos += self.y_speed
    def bounce(self):
        self.x_speed *= -1
        self.y_speed *= -1
    def reset(self):
        self.x_pos = 400
        self.y_pos = 300
        self.x_speed = random

# creates paddle object
class Paddle:
    def __init__(self, screen, background_color, side):
        self.screen = screen
        self.background_color = background_color
        self.side = side
        self.x_pos = 0
        self.y_pos = 0
        self.width = 10
        self.height = 100
        self.color = (255, 255, 255)
    def draw(self):
        pygame.draw.rect(self.screen, self.color, (self.x_pos, self.y_pos, self.width, self.height))
    def move_up(self):
        self.y_pos -= 10
    def move_down(self):
        self.y_pos += 10
    def move(self):
        pass
    def collision(self, ball):
        if ball.x_pos - ball.radius <= self.x_pos + self.width and ball.x_pos + ball.radius >= self.x_pos and ball.y_pos - ball.radius <= self.y_pos + self.height and ball.y_pos + ball.radius >= self.y_pos:
            return True
        else:
            return False
    def move(self):
        pass
    def bounce(self):
        pass
    def reset(self):
        pass

# creates game loop
def game_loop():
    # initialize pygame
    pygame.init()
    # create screen
    screen = pygame.display.set_mode((800, 600))
    # set title
    pygame.display.set_caption("Pong")
    # set background color
    background_color = (0, 0, 0)
    # set clock
    clock = pygame.time.Clock()
    # set font
    font = pygame.font.SysFont(None, 50)
    # set score
    score_player = 0
    score_ai = 0
    # set ball
    ball = Ball(screen, background_color)
    # set paddle
    paddle_player = Paddle(screen, background_color, "player")
    paddle_ai = Paddle(screen, background_color, "ai")
    # set game state
    game_state = "playing"
    # set game loop
    while game_state == "playing":
        # set fps
        clock.tick(60)
        # set events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_state = "quit"
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    paddle_player.move_up()
                if event.key == pygame.K_DOWN:
                    paddle_player.move_down()
        # set collisions
        if ball.collision(paddle_player) or ball.collision(paddle_ai):
            ball.bounce()
        # set score
        if ball.x_pos < 0:
            score_ai += 1
            ball.reset()
        if ball.x_pos > 800:
            score_player += 1
            ball.reset()
        # set ai
        if ball.y_pos < paddle_ai.y_pos:
            paddle_ai.move_up()
        if ball.y_pos > paddle_ai.y_pos:
            paddle_ai.move_down()
        # set screen
        screen.fill(background_color)
        # set text
        text = font.render("Player: " + str(score_player) + " | AI: " + str(score_ai), True, (255, 255, 255))
        screen.blit(text, (400, 10))
        # set ball
        ball.draw()
        ball.move()
        # set paddle
        paddle_player.draw()
        paddle_ai.draw()
        # set screen
        pygame.display.update()
    # set quit
    pygame.quit()
    sys.exit()
    